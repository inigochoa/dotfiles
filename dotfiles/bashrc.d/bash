# ~/.bashrc.d/bash

## atuin - https://atuin.sh/
if [ -d ~/.atuin ]; then
  . ~/.atuin/bin/env

  ## Source preexec functions
  if [ -f ~/.bash-preexec.sh ]; then
    . ~/.bash-preexec.sh
  fi

  eval "$(atuin init bash)"
fi

## Bash
alias functions="declare -f | grep '^[a-z].* ()' | sed 's/{$//'"
alias histstats="history | awk '{CMD[\$2]++;count++;}END { for (a in CMD)print CMD[a] \" \" CMD[a]/count*100 \"% \" a;}' | grep -v './' | column -c3 -s ' ' -t | sort -nr | nl |  head -n10"
alias paths='echo -e ${PATH//:/\\n}'
alias reload="source ~/.bash_profile"

## cooklang - https://cooklang.org/
if command -v cook >/dev/null 2>&1; then
  alias cooks="cook server --open ~/projects/cookbook"
fi

## Editor
export EDITOR=vim
alias e=$EDITOR

## Functions
### Show bash aliases
aliases() {
  for a in "${!BASH_ALIASES[@]}"; do
    printf "alias: %-8s defined as: %s\n" "$a" "${BASH_ALIASES[$a]}";
  done
}

### Cheat sheet
cheat() {
  local request="cheat.sh/${1}"
  [ "$(tput cols)" -lt 125 ] && request+='?n'
  curl -H "Accept-Language: ${LANG%_*}" --compressed "$request"
}

### Append to $PATH
path_append() {
  path_remove "$1"
  PATH="${PATH:+"$PATH:"}$1"
}

### Prepend to $PATH
path_prepend() {
  path_remove "$1"
  PATH="$1${PATH:+":$PATH"}"
}

### Remove from $PATH
path_remove() {
  PATH=$(echo -n "$PATH" | awk -v RS=: -v ORS=: "\$0 != \"$1\"" | sed 's/:$//')
}

## Fuck commands
alias fuck='sudo "$BASH" -c "$(history -p !!)"'
alias fucking=sudo
alias please=fuck
alias plz=please

## fzf - https://github.com/junegunn/fzf
if command -v fzf >/dev/null 2>&1; then
  ### If available, search files with fd https://github.com/sharkdp/fd
  if command -v fd >/dev/null 2>&1; then
    export FZF_DEFAULT_COMMAND='fd --type f --strip-cwd-prefix'
  fi

  ### Genereated with https://vitormv.github.io/fzf-themes/
  export FZF_DEFAULT_OPTS=$FZF_DEFAULT_OPTS'
  --color=fg:#d0d0d0,fg+:#d0d0d0,bg:-1,bg+:#262626
  --color=hl:#5f87af,hl+:#5fd7ff,info:#afaf87,marker:#87ff00
  --color=prompt:#d7005f,spinner:#af5fff,pointer:#af5fff,header:#87afaf
  --color=border:#d0d0d0,label:#aeaeae,query:#d9d9d9
  --border="rounded" --border-label-pos="0" --preview-window="border-rounded"
  --prompt="> " --marker=">"
  --pointer="◆" --separator="─" --scrollbar="│" --info="right"'

  alias fview="fzf --preview='bat --color=always --style=numbers --line-range=:500 {}'"

  ### ssh selection
  ssh() {
    local target="$1"

    if [[ -z "$target" ]]; then
      local configs=("$HOME/.ssh/config" "$HOME/.ssh/config.d/*")
      local hosts=$(grep -hE '^Host ' "${configs[@]}" 2>/dev/null | awk '{print $2}' | grep -vE '\*|\?' | sort -u -V)

      target=$(echo "$hosts" | fzf --border-label=" SSH " --height=40% --prompt="SSH > " --preview="ssh -GT {} | awk '/^hostname |^user /'" --preview-window=up:2:wrap)
    fi

    if [ -n "$target" ]; then
      command ssh "$target" "${@:2}"
    fi
  }
fi

## Grep
alias grep="grep --color=auto"

## timer - https://github.com/caarlos0/timer
if command -v timer >/dev/null 2>&1; then
  ### Pomodoro timer
  pomodoro() {
    [[ -z "$1" ]] && {
      echo "Usage: pomodoro [break|work|<minutes>]"
      return 1
    }

    local -A options
    options["break"]=10
    options["work"]=45

    local minutes
    local session

    if [[ "$1" =~ ^[0-9]+$ ]]; then
      minutes="$1"
      session="custom"
    elif [[ -n "${options["$1"]}" ]]; then
      minutes="${options["$1"]}"
      session="$1"
    else
      echo "Error: Unknown session type '$1'"
      echo "Available: ${!options[@]} or custom minutes (e.g., 25)"
      return 1
    fi

    clear

    local body="Session completed!"
    timer ${minutes}m --format 24h --name "$session" || {
      body="Session interrupted!"
    }

    notify-send "$session" "$body" --app-name="🍅 Pomodoro" --expire-time=0 2>/dev/null
  }

  ### Pomodoro timer aliases
  alias pbr="pomodoro break"
  alias pwo="pomodoro work"
fi
