# ~/.bashrc.d/git

## Functions
### Clone a git repository and cd inside
gclone() {
  git clone "$1" && cd "$(basename "$1" .git)"
}

## Open a git repository in browser
gopen() {
  case "$(uname -s)" in
    Linux*)  OPEN_CMD="xdg-open";;
    Darwin*) OPEN_CMD="open";;
    CYGWIN*|MINGW*|MSYS*) OPEN_CMD="start";;
    *) echo "Sistema operativo no soportado" && return 1;;
  esac

  local remote="origin"
  if [ -n "$1" ]; then
    remote="$1"
  fi

  local url=$(git remote get-url $remote)
  if [ $? -ne 0 ]; then
    echo "El remoto '$remote' no existe"
    return 1
  fi

  if [[ $url == git@* ]]; then
    url=$(echo $url | sed -E 's|git@([^:]+):|https://\1/|')
  fi

  url=$(echo $url | sed 's|\.git$||')

  local branch=$(git symbolic-ref --short HEAD 2>/dev/null)
  if [ $? -ne 0 ]; then
    echo "Abriendo $url"
    $OPEN_CMD "$url"
    return 0
  fi

  if [[ $url == *github.com* ]]; then
    url="$url/tree/$branch"
  elif [[ $url == *gitlab* ]]; then
    url="$url/-/tree/$branch"
  elif [[ $url == *bitbucket* ]]; then
    url="$url/src/$branch"
  elif [[ $url == *gitea* ]]; then
    url="$url/src/branch/$branch"
  else
    echo "Proveedor no reconocido específicamente, abriendo URL base"
  fi

  echo "Abriendo $url"
  $OPEN_CMD "$url"
}

### Sync a repository with upstream remote
gsync() {
  local branch=$(git symbolic-ref refs/remotes/origin/HEAD | sed 's@^refs/remotes/origin/@@')
  local current_branch=$(git rev-parse --abbrev-ref HEAD)
  local stashed=false

  echo "🔄 Synchronizing branch $branch between origin and upstream..."

  ## Save local changes
  if ! git diff --quiet; then
    echo "⚠️ There are uncommitted local changes. Saving with stash..."
    git stash push -m "auto: changes before gsync at $(date)"

    local stashed=true
  fi

  ## Checkout to the branch
  if [ "$current_branch" != "$branch" ]; then
    echo "🔀 Switching from '$current_branch' to '$branch'..."

    if ! git checkout "$branch"; then
      echo "❌ Error switching to branch '$branch'"

      if [ true = "$stashed" ]; then
        git stash pop
      fi

      return 1
    fi
  fi

  ## Pull from origin
  echo "⬇️ Pulling changes from origin/$branch..."
  if ! git pull origin "$branch"; then
    echo "❌ Error pulling changes from origin/$branch"

    if [ true = "$stashed" ]; then
      git stash pop
    fi

    return 1
  fi

  ## Fetching from upstream
  echo "🔍 Fetching changes from upstream..."
  if ! git fetch upstream; then
    echo "❌ Error fetching changes from upstream"

    if [ true = "$stashed" ]; then
      git stash pop
    fi

    return 1
  fi

  ## Merge from upstram
  echo "🔀 Merging changes from upstram/$branch..."
  if git merge "upstram/$branch"; then
    echo "✅ Merge successful. Pushing changes to origin/$branch..."

    if git push origin "$branch"; then
      echo "🎉 Synchronization completed successfully!"
    else
      echo "❌ Error pushing to origin/$branch"

      if [ true = "$stashed" ]; then
        git stash pop
      fi

      return 1
    fi
  else
    echo "⚠️ Conflicts detected during merge."
    echo -n "Do you want to open the editor to resolve conflicts? (y/n): "
    read answer

    if [[ "$answer" =~ ^[Yy]$ ]]; then
      echo "🔧 Opening editor..."
      code .
    else
      echo "🛑 Operation aborted by user. Running git merge --abort"
      git merge --abort
    fi
  fi

  ## Recover changes from stash
  if [ true = "$stashed" ]; then
    echo "📦 Recovering previously saved changes..."
    git stash pop
  fi

  ## Revert to the original branch if it was different
  if [ "$current_branch" != "$branch" ]; then
    echo "🔙 Reverting to the original branch '$current_branch'..."
    git checkout "$current_branch"
  fi
}

## git-cliff - https://github.com/orhun/git-cliff
alias gitcliff="pnpx git-cliff@latest --output CHANGELOG.md --unreleased"

## onefetch - https://onefetch.dev/
if command -v onefetch >/dev/null 2>&1; then
  alias git-summary="onefetch"
  alias git-sm="onefetch"
  alias gsm="onefetch"
fi
